.hero {
  padding: var(--space-3xl) 0;
  margin-top: 70px;
  background: var(--color-white);
}

.content {
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--space-2xl);
  align-items: center;
}

@media (min-width: 768px) {
  .content {
    grid-template-columns: 1fr 1fr;
    gap: var(--space-3xl);
  }
}

.textContent {
  text-align: center;
}

@media (min-width: 768px) {
  .textContent {
    text-align: left;
  }
}

.heading {
  font-size: var(--font-size-5xl);
  font-weight: 700;
  color: var(--color-gray-900);
  margin-bottom: var(--space-sm);
  line-height: 1.2;
}

.highlight {
  color: var(--color-primary);
}

.subheading {
  font-size: var(--font-size-2xl);
  color: var(--color-gray-600);
  margin-bottom: var(--space-xl);
  font-weight: 400;
}

/* --- NOVAS REGRAS PARA A LISTA DE INFORMAÇÕES --- */
.cta {
  margin-bottom: var(--space-xl);
}

/* --- REGRAS ORIGINAIS DOS ÍCONES (INTOCADAS) --- */
.icons {
  display: flex;
  justify-content: center;
  gap: var(--space-md);
  flex-wrap: wrap;
}

@media (min-width: 768px) {
  .icons {
    justify-content: flex-start;
  }
}

.icon {
  font-size: var(--font-size-2xl);
  color: var(--color-gray-600);
  transition: color 0.3s ease, transform 0.3s ease;
}

.icon:hover {
  color: var(--color-primary);
  transform: scale(1.2);
}

/* --- REGRAS ATUALIZADAS PARA A IMAGEM E BLOB --- */
.imageContent {
  display: flex;
  justify-content: center;
  align-items: center;
  order: -1; /* Move a imagem para cima em telas pequenas */
}

@media (min-width: 768px) {
  .imageContent {
    order: 0; /* Ordem normal em telas maiores */
  }
}

.imageWrapper {
  position: relative;
  width: 330px;
  height: 330px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.profileContainer {
  position: relative;
  z-index: 2;
  width: 280px;
  height: 280px;
  border-radius: 50%;
  overflow: hidden;
  border: none;
  box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;
}

.profileImage {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.animatedBlob {
  position: absolute;
  width: 330px;
  height: 330px;
  background: linear-gradient(45deg, #1E62FF, #3B82F6, #2563EB, #4F96FF);
  background-size: 400% 400%;
  border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
  z-index: 1;
  animation: blob 15s ease-in-out infinite, 
             gradientShift 8s ease-in-out infinite, 
             shadowPulse 2s ease-in-out infinite;
}

/* Animação para morphing da forma do blob */
@keyframes blob {
  0% {
    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
  }
  25% {
    border-radius: 30% 70% 40% 60% / 40% 60% 30% 70%;
  }
  50% {
    border-radius: 70% 30% 60% 40% / 30% 70% 40% 60%;
  }
  75% {
    border-radius: 40% 60% 70% 30% / 70% 40% 60% 30%;
  }
  100% {
    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
  }
}


/* Preservando a responsividade para telas menores */
@media (max-width: 567px) {
  .imageWrapper {
    width: 250px;
    height: 250px;
  }
  .animatedBlob {
    width: 240px;
    height: 240px;
  }
  .profileContainer {
    width: 200px;
    height: 200px;
  }
}

.textContent,
.imageContent {
  opacity: 0;
  transform: translateY(20px); /* Começa um pouco para baixo */
  transition: opacity 0.6s ease-out, transform 0.6s ease-out;
}

/* Estilo aplicado quando o elemento se torna visível.
  A classe .isVisible é adicionada pelo React quando `inView` se torna true.
*/
.textContent.isVisible,
.imageContent.isVisible {
  opacity: 1;
  transform: translateY(0); /* Volta para a posição original */
}

/* Opcional: Adiciona um pequeno atraso na animação da imagem */
.imageContent {
  transition-delay: 0.2s;
}

/* --- ANIMAÇÕES ADICIONADAS --- */
@keyframes blob {
  0% {
    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
    transform: rotate(0deg) scale(1);
  }
  25% {
    border-radius: 70% 30% 60% 40% / 30% 60% 40% 70%;
    transform: rotate(90deg) scale(0.95);
  }
  50% {
    border-radius: 50% 50% 30% 70% / 40% 60% 70% 30%;
    transform: rotate(180deg) scale(1.05);
  }
  75% {
    border-radius: 40% 60% 70% 30% / 50% 50% 60% 40%;
    transform: rotate(270deg) scale(0.95);
  }
  100% {
    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
    transform: rotate(360deg) scale(1);
  }
}

@keyframes gradientShift {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}